  ; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define OpenBabelPath "{app}\VRChem_Data\Plugins"

[Setup]
AppName=VRChem
AppVersion=1.0.0
DefaultDirName={pf}\VRChem
DefaultGroupName=VRChem
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64 
OutputBaseFilename="VRChem_installer"

[Tasks]
Name: installOB; Description: "Install OpenBabel components"

[Files]
Source: "BUILD\*"; DestDir: "{app}"; Flags: recursesubdirs
Source: "OpenBabel-3.0.0_DATA\*"; DestDir: "{commonappdata}\OpenBabel-3.0.0"; Flags: recursesubdirs; Check: CheckInstallOB;
Source: "OpenBabel-3.0.0\*"; DestDir: "{#OpenBabelPath}"; Check: CheckInstallOB;

[Icons]
Name: "{group}\VRChem"; Filename: "{app}\VRChem.exe"; WorkingDir: "{app}"

[Registry]
Root: HKCU; Subkey: "Environment"; ValueType: string; ValueName: "BABEL_DATADIR"; ValueData: "{commonappdata}\OpenBabel-3.0.0\data"; Flags: uninsdeletevalue; Check: CheckInstallOB;

[Code]
const EnvironmentKey = 'Environment';

function CheckInstallOB(): Boolean;
begin
    if (IsTaskSelected('installOB')) and (not RegKeyExists(HKCU, 'Software\OpenBabel 3.0.0')) then
        Result := True
    else
        Result := False
end;

procedure EnvAddPath(Path: string);
var
    Paths: string;
begin
    { Retrieve current path (use empty string if entry not exists) }
    if not RegQueryStringValue(HKCU, EnvironmentKey, 'Path', Paths)
    then Paths := '';

    { Skip if string already found in path }
    if Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';') > 0 then exit;

    { App string to the end of the path variable }
    Paths := Paths + ';'+ Path +';'

    { Overwrite (or create if missing) path environment variable }
    if RegWriteStringValue(HKCU, EnvironmentKey, 'Path', Paths)
    then Log(Format('The [%s] added to PATH: [%s]', [Path, Paths]))
    else Log(Format('Error while adding the [%s] to PATH: [%s]', [Path, Paths]));
end;

procedure EnvRemovePath(Path: string);
var
    Paths: string;
    P: Integer;
begin
    { Skip if registry entry not exists }
    if not RegQueryStringValue(HKCU, EnvironmentKey, 'Path', Paths) then
        exit;

    { Skip if string not found in path }
    P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');
    if P = 0 then exit;

    { Update path variable }
    Delete(Paths, P - 1, Length(Path) + 1);

    { Overwrite path environment variable }
    if RegWriteStringValue(HKCU, EnvironmentKey, 'Path', Paths)
    then Log(Format('The [%s] removed from PATH: [%s]', [Path, Paths]))
    else Log(Format('Error while removing the [%s] from PATH: [%s]', [Path, Paths]));
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
    if (CurStep = ssPostInstall) and CheckInstallOB()
         then EnvAddPath(ExpandConstant('{#OpenBabelPath}'));
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
    if (CurUninstallStep = usPostUninstall) and (not RegKeyExists(HKCU, 'Software\OpenBabel 3.0.0'))
        then EnvRemovePath(ExpandConstant('{#OpenBabelPath}'));
end;